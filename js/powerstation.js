class PowerStation {
  constructor(batteryCapacity, maximumInput, maximumOutput) {
    this.batteryCapacity = batteryCapacity;
    this.maximumInput = maximumInput;
    this.maximumOutput = maximumOutput;
    this.capacityLeft = batteryCapacity;
    this.inputs = 0;
    this.outputs = {};
  }

  updateInput(voltage, current) {
    const power = voltage * current;
    if (power > this.maximumInput) {
      this.inputs = power;
      return;
    }
    this.inputs = power;
    this.capacityLeft = Math.min(
      this.capacityLeft + power,
      this.batteryCapacity,
    );
  }

  connectOutput(outputId) {
    this.outputs[outputId] = 0;
  }

  updateOutput(outputId, voltage, current) {
    if (this.outputs[outputId] !== undefined) {
      this.outputs[outputId] = voltage * current;
    }
  }

  disconnectOutput(outputId) {
    delete this.outputs[outputId];
  }

  updateBatteryLevel(capacityLeft) {
    this.capacityLeft = capacityLeft;
  }

  get batteryPercentage() {
    return parseFloat(
      ((this.capacityLeft / this.batteryCapacity) * 100).toFixed(1),
    );
  }

  get totalOutputPower() {
    return Math.round(
      Object.values(this.outputs).reduce((sum, power) => sum + power, 0),
    );
  }

  get timeRemaining() {
    const netPower = this.inputs - this.totalOutputPower;
    if (netPower === 0) return '99:59';
    const hours = Math.floor(this.capacityLeft / Math.abs(netPower));
    const minutes = Math.round(
      ((this.capacityLeft % Math.abs(netPower)) / Math.abs(netPower)) * 60,
    );
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(
      2,
      '0',
    )}`;
  }

  get status() {
    if (
      this.inputs > this.maximumInput ||
      this.totalOutputPower > this.maximumOutput
    ) {
      return 'overload';
    }
    if (this.inputs > this.totalOutputPower) {
      return 'charging';
    }
    if (this.totalOutputPower > 0) {
      return 'discharging';
    }
    return 'idle';
  }
}


// –°–æ–∑–¥–∞–µ–º —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é —Å –±–∞—Ç–∞—Ä–µ–µ–π 2000 –í—Ç¬∑—á, –º–∞–∫—Å. –≤—Ö–æ–¥–æ–º 500 –í—Ç –∏ –º–∞–∫—Å. –≤—ã—Ö–æ–¥–æ–º 800 –í—Ç
const station = new PowerStation(2000, 500, 800);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞
console.log("üîã –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥:", station.batteryPercentage, "%");

// –ó–∞—Ä—è–∂–∞–µ–º —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 220 –í * 2 –ê = 440 –í—Ç)
station.updateInput(220, 2);
console.log("‚ö° –ó–∞—Ä—è–¥–∫–∞... –ù–æ–≤—ã–π –∑–∞—Ä—è–¥:", station.batteryPercentage, "%");

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
station.connectOutput('phone');
station.updateOutput('phone', 30, 2); // 20 –í * 3 –ê = 60 –í—Ç
console.log("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω. –¢–µ–∫—É—â–∞—è –≤—ã—Ö–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:", station.totalOutputPower, "–í—Ç");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
console.log("üìä –°—Ç–∞—Ç—É—Å —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏:", station.status);
console.log("‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:", station.timeRemaining);

// –û—Ç–∫–ª—é—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
station.disconnectOutput('phone');
console.log(
  '‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω. –û–±—â–∞—è –≤—ã—Ö–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:',
  station.totalOutputPower,
  '–í—Ç',
);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
console.log("üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏–∏:", station.status);
