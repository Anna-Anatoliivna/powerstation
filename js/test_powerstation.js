class PowerStation {
  constructor(batteryCapacity, maximumInput, maximumOutput) {
    this.batteryCapacity = batteryCapacity;
    this.maximumInput = maximumInput;
    this.maximumOutput = maximumOutput;
    this.capacityLeft = batteryCapacity;
    this.inputs = 0;
    this.outputs = {};
  }

  updateInput(voltage, current) {
    const power = voltage * current;
    if (power > this.maximumInput) {
      this.inputs = power;
      return;
    }
    this.inputs = power;
    this.capacityLeft = Math.min(
      this.capacityLeft + power,
      this.batteryCapacity,
    );
  }

  connectOutput(outputId) {
    this.outputs[outputId] = 0;
  }

  updateOutput(outputId, voltage, current) {
    if (this.outputs[outputId] !== undefined) {
      this.outputs[outputId] = voltage * current;
    }
  }

  disconnectOutput(outputId) {
    delete this.outputs[outputId];
  }

  updateBatteryLevel(capacityLeft) {
    this.capacityLeft = capacityLeft;
  }

  get batteryPercentage() {
    return parseFloat(
      ((this.capacityLeft / this.batteryCapacity) * 100).toFixed(1),
    );
  }

  get totalOutputPower() {
    return Object.values(this.outputs).reduce((sum, power) => sum + power, 0);
  }

  get timeRemaining() {
    const netPower = this.inputs - this.totalOutputPower;
    if (netPower === 0) return '99:59';
    const hours = Math.floor(this.capacityLeft / Math.abs(netPower));
    const minutes = Math.round(
      ((this.capacityLeft % Math.abs(netPower)) / Math.abs(netPower)) * 60,
    );
    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(
      2,
      '0',
    )}`;
  }

  get status() {
    const outputPower = this.totalOutputPower; // Use the totalOutputPower getter
    const netPower = this.inputs - outputPower; // Difference between input and output power

    if (this.inputs > this.maximumInput || outputPower > this.maximumOutput) {
      return 'overload'; // Overload has the highest priority
    }
    if (outputPower > 0 && this.inputs === 0) {
      return 'discharging'; // Active discharging without input power
    }
    if (netPower > 0) {
      return 'charging'; // If input is greater than output, it's charging
    }
    return 'idle'; // If no input and output
  }
}

// Test cases
console.log('\nüîç –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ PowerStation');

const station = new PowerStation(2000, 500, 800); // –ë–∞—Ç–∞—Ä–µ—è 2000 –í—Ç¬∑—á, –º–∞–∫—Å. –≤—Ö–æ–¥ 500 –í—Ç, –º–∞–∫—Å. –≤—ã—Ö–æ–¥ 800 –í—Ç

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ IDLE (–Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
console.log('‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: idle | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:', station.status);

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ CHARGING (–∑–∞—Ä—è–¥–∫–∞ –∏–¥—ë—Ç)
station.updateInput(220, 2); // 220 –í * 2 –ê = 440 –í—Ç (–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è)
console.log(
  '‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: charging | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:',
  station.status,
);

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ DISCHARGING (—ç–Ω–µ—Ä–≥–∏—è —Ä–∞—Å—Ö–æ–¥—É–µ—Ç—Å—è)
station.connectOutput('laptop');
station.updateOutput('laptop', 20, 3); // 20 –í * 3 –ê = 60 –í—Ç
station.updateInput(0, 0); // Ensure no input power
console.log(
  '‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: discharging | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:',
  station.status,
);

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ OVERLOAD (–ø—Ä–µ–≤—ã—à–µ–Ω–∞ –≤—ã—Ö–æ–¥–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å)
station.updateOutput('heater', 220, 5); // 220 –í * 5 –ê = 1100 –í—Ç (–≤—ã—à–µ 800 –í—Ç)
console.log(
  '‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: overload | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:',
  station.status,
);

// 5. –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—ë –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º IDLE
station.disconnectOutput('laptop');
station.disconnectOutput('heater');
station.updateInput(0, 0);
console.log('‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: idle | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å:', station.status);
